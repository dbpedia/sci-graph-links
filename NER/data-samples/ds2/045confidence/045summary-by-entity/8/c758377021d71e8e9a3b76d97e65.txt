Abstract. We analyze the maximum throughput that known classes of reliable multicast transport protocols can attain. A new taxonomy of reliable multicast transport protocols is introduced based on the premise that the mechanisms used to release data at the source after correct delivery should be decoupled from the mechanisms used to pace the transmission of data and to effect error recovery. Receiver-initiated protocols, which are based entirely on negative acknowledgments (naks) sent from the receivers to the sender, have been proposed to avoid the implosion of acknowledgements (acks) to the source. However, these protocols are shown to require infinite buffers in order to prevent deadlocks. Two other solutions to the ack-implosion problem are tree-based protocols and ring-based protocols. The first organize the receivers in a tree and send acks along the tree; the latter send acks to the sender along a ring of receivers. These two classes of protocols are shown to operate correctly with finite buffers. It is shown that tree-based protocols constitute the most scalable class of all reliable multicast protocols proposed to date.
reliable multicast  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Reliable_multicast    

reliable multicast            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Reliable_multicast    

maximum throughput            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Throughput            

deadlocks                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Deadlock              

reliable multicast            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Reliable_multicast    

taxonomy                      0.9888797343128752^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Taxonomy_(biology)    

