Abstract It is well known that considering a non-Euclidean Minkowski metric in Multidimensional Scaling, either for the distance model or for the loss function, increases the computational problem of local minima considerably. In this paper, we propose an algorithm in which both the loss function and the composition rule can be considered in any Minkowski metric, using a multivariate randomly alternating Simulated Annealing procedure with permutation and translation phases. The algorithm has been implemented in Fortran and tested over classical and simulated data matrices with sizes up to 200 objects. A study has been carried out with some of the common loss functions to determine the most suitable values for the main parameters. The experimental results confirm the theoretical expectation that Simulated Annealing is a suitable strategy to deal by itself with the optimization problems in Multidimensional Scaling, in particular for City-Block, Euclidean and Infinity metrics.
Multidimensional Scaling1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Multidimensional_scaling

multivariate                  0.8200933936732606^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Polynomial            

Minkowski metric              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Minkowski_space       

Multidimensional Scaling      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Multidimensional_scaling

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

Simulated Annealing           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Simulated_annealing   

non-Euclidean                 0.8226025741886682^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Euclidean_geometry    

Euclidean                     0.8117906507312245^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Euclidean_distance    

local minima                  0.9995591019036981^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Maxima_and_minima     

computational problem         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Computational_problem 

classical                     0.9999998836649479^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Classical_mechanics   

permutation                   0.9999999997933173^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Permutation           

Simulated Annealing           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Simulated_annealing   

loss functions                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Loss_function         

optimization problems         0.9999999998813109^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

matrices                      0.9999999998921112^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Matrix_(mathematics)  

loss function                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Loss_function         

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

Fortran                       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Fortran               

loss function                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Loss_function         

Minkowski metric              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Minkowski_space       

