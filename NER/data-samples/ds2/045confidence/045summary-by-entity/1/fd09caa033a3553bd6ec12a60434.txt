Abstract Two-Dimensional Colliding Bodies Optimization (2D-CBO) is a new meta-heuristic algorithm based on two-dimensional collision laws. In this algorithm, like standard CBO, each agent is modeled as a body with a specified mass and velocity and collision occurs between pairs of objects, but unlike the standard CBO, the collision is based on two-dimensional law. In addition, a memory is added to the standard CBO for saving the best-so-far solution. In this paper, a new improved version of the 2D-CBO algorithm, namely Enhanced Two-Dimensional Colliding Bodies Optimization (E2D-CBO), is developed. E2D-CBO has a memory not only for saving the best-so-far solution, but also saving the number of best-so-far solutions and replacing them with the worst solutions in each iteration; moreover, it uses a mechanism to escape from local optima. By applying these changes, the exploitation ability and convergence rate of the 2D-CBO have been improved. The performance of this algorithm is compared to three recently developed meta-heuristic algorithms consisting of the standard CBO, Enhanced CBO and Two-Dimensional CBO algorithms on optimization of grillage system design. The results confirm the superiority of the E2D-CBO in comparison with the previous variants of the CBO algorithm.
CBO                 0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

algorithms                    0.9999999775764083^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithms                    0.9999999775764083^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

CBO                           0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

CBO                           0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

CBO                           0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

memory                        0.9347278195382159^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_memory       

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

CBO                           0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

CBO                           0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

CBO                           0.9999995038601904^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

velocity                      0.9999984069552467^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Velocity              

convergence                   0.5743235538327457^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Rate_of_convergence   

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

memory                        0.9347278195382159^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_memory       

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

optimization                  0.9998223744591387^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

