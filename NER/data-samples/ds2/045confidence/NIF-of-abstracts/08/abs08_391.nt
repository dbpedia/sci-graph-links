@prefix schema:   <http://schema.org/> .
@prefix dbpedia:   <http://dbpedia.org/ontology/> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix itsrdf: <http://www.w3.org/2005/11/its/rdf#> .
@prefix nif:   <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .

<#offset_1842_1851>  a          nif:Phrase , nif:OffsetBasedString ;
        nif:anchorOf            "smartcard" ;
        nif:beginIndex          "1842"^^xsd:nonNegativeInteger ;
        nif:endIndex            "1851"^^xsd:nonNegativeInteger ;
        nif:referenceContext    <#offset_0_2014> ;
        itsrdf:taAnnotatorsRef  <http://model.dbpedia-spotlight.org> ;
        itsrdf:taConfidence     "0.9999999982076133"^^xsd:double ;
        itsrdf:taIdentRef       <http://dbpedia.org/resource/Smart_card> .

<#offset_168_182>  a            nif:Phrase , nif:OffsetBasedString ;
        nif:anchorOf            "access control" ;
        nif:beginIndex          "168"^^xsd:nonNegativeInteger ;
        nif:endIndex            "182"^^xsd:nonNegativeInteger ;
        nif:referenceContext    <#offset_0_2014> ;
        itsrdf:taAnnotatorsRef  <http://model.dbpedia-spotlight.org> ;
        itsrdf:taConfidence     "1.0"^^xsd:double ;
        itsrdf:taIdentRef       <http://dbpedia.org/resource/Access_control> .

<#offset_739_749>  a            nif:Phrase , nif:OffsetBasedString ;
        nif:anchorOf            "smartcards" ;
        nif:beginIndex          "739"^^xsd:nonNegativeInteger ;
        nif:endIndex            "749"^^xsd:nonNegativeInteger ;
        nif:referenceContext    <#offset_0_2014> ;
        itsrdf:taAnnotatorsRef  <http://model.dbpedia-spotlight.org> ;
        itsrdf:taConfidence     "1.0"^^xsd:double ;
        itsrdf:taIdentRef       <http://dbpedia.org/resource/Smart_card> .

<#collection>  a        nif:ContextCollection ;
        nif:hasContext  <#offset_0_2014> ;
        <http://purl.org/dc/terms/conformsTo>
                <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core/2.1> .

<#offset_1250_1260>  a          nif:Phrase , nif:OffsetBasedString ;
        nif:anchorOf            "desiderata" ;
        nif:beginIndex          "1250"^^xsd:nonNegativeInteger ;
        nif:endIndex            "1260"^^xsd:nonNegativeInteger ;
        nif:referenceContext    <#offset_0_2014> ;
        itsrdf:taAnnotatorsRef  <http://model.dbpedia-spotlight.org> ;
        itsrdf:taConfidence     "0.6566305459356657"^^xsd:double ;
        itsrdf:taIdentRef       <http://dbpedia.org/resource/Desiderata> .

<#offset_0_2014>  a     nif:OffsetBasedString , nif:Context ;
        nif:beginIndex  "0"^^xsd:nonNegativeInteger ;
        nif:endIndex    "2014"^^xsd:nonNegativeInteger ;
        nif:isString    "Abstract We explore the problem of portable and flexible privacy preserving access rights that permit access to a large collection of digital goods. Privacy-preserving access control means that the service provider can neither learn what access rights a customer has nor link a request to access an item to a particular customer, thus maintaining privacy of both customer activity and customer access rights. Flexible access rights allow a customer to choose a subset of items or groups of items from the repository, obtain access to and be charged only for the items selected. And portability of access rights means that the rights themselves can be stored on small devices of limited storage space and computational capabilities such as smartcards or sensors, and therefore the rights must be enforced using the limited resources available. In this paper, we present and compare two schemes that address the problem of such access rights. We show that much can be achieved if one allows for even a negligible amount of false positives – items that were not requested by the customer, but inadvertently were included in the customer access right representation due to constrained space resources. But minimizing false positives is one of many other desiderata that include protection against sharing of false positives information by unscrupulous users, providing the users with transaction untraceability and unlinkability, and forward compatibility of the scheme. Our first scheme does not place any constraints on the amount of space available on the limited-capacity storage device, and searches for the best representation that meets the requirements. The second scheme, on the other hand, has (modest) requirements on the storage space available, but guarantees a low rate of false positives: with O(mc) storage space available on the smartcard (where m is the number of items or groups of items included in the subscription and c is a selectable parameter), it achieves a rate of false positives of m −c .\n" .

<#offset_134_141>  a            nif:Phrase , nif:OffsetBasedString ;
        nif:anchorOf            "digital" ;
        nif:beginIndex          "134"^^xsd:nonNegativeInteger ;
        nif:endIndex            "141"^^xsd:nonNegativeInteger ;
        nif:referenceContext    <#offset_0_2014> ;
        itsrdf:taAnnotatorsRef  <http://model.dbpedia-spotlight.org> ;
        itsrdf:taConfidence     "0.9999739430545752"^^xsd:double ;
        itsrdf:taIdentRef       <http://dbpedia.org/resource/Digital_signal> .

<#offset_1807_1809>  a          nif:Phrase , nif:OffsetBasedString ;
        nif:anchorOf            "mc" ;
        nif:beginIndex          "1807"^^xsd:nonNegativeInteger ;
        nif:endIndex            "1809"^^xsd:nonNegativeInteger ;
        nif:referenceContext    <#offset_0_2014> ;
        itsrdf:taAnnotatorsRef  <http://model.dbpedia-spotlight.org> ;
        itsrdf:taConfidence     "0.9995606694174793"^^xsd:double ;
        itsrdf:taIdentRef       <http://dbpedia.org/resource/Compact_Cassette> .
