Abstract Makespan minimization on identical parallel machines is a classical scheduling problem. We consider the online scenario where a sequence of n jobs has to be scheduled non-preemptively on m machines so as to minimize the maximum completion time of any job. The best competitive ratio that can be achieved by deterministic online algorithms is in the range [1.88, 1.9201]. Currently no randomized online algorithm with a smaller competitiveness is known, for general m. In this paper we explore the power of job migration, i.e. an online scheduler is allowed to perform a limited number of job reassignments. Migration is a common technique used in theory and practice to balance load in parallel processing environments. As our main result we settle the performance that can be achieved by deterministic online algorithms. We develop an algorithm that is $$\alpha _m$$ αm -competitive, for any $$m\ge 2$$ m≥2 , where $$\alpha _m$$ αm is the solution of a certain equation. For $$m=2$$ m=2 , $$\alpha _2 = 4/3$$ α2=4/3 and $$\lim _{m\rightarrow \infty } \alpha _m = W_{-1}(-1/e^2)/(1  W_{-1}(-1/e^2)) \approx 1.4659$$ limm→∞αm=W-1(-1/e2)/(1 W-1(-1/e2))≈1.4659 . Here $$W_{-1}$$ W-1 is the lower branch of the Lambert W function. For $$m\ge 11$$ m≥11 , the algorithm uses at most 7m migration operations. For smaller m, 8m to 10m operations may be performed. We complement this result by a matching lower bound: No online algorithm that uses o(n) job migrations can achieve a competitive ratio smaller than $$\alpha _m$$ αm . We finally trade performance for migrations. We give a family of algorithms that is c-competitive, for any $$5/3\le c \le 2$$ 5/3≤c≤2 . For $$c= 5/3$$ c=5/3 , the strategy uses at most 4m job migrations. For $$c=1.75$$ c=1.75 , at most 2.5m migrations are used.
job migration       0.9999583349207487^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Job_migration         

online algorithm              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Online_algorithm      

classical                     0.9995208572993494^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Classical_mechanics   

competitive ratio             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Competitive_analysis_(online_algorithm)

algorithms                    0.9985903515885088^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

online algorithms             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Online_algorithm      

deterministic                 0.9156844835738792^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Deterministic_algorithm

Lambert W function            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Lambert_W_function    

α2                            0.9891676981233091^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Alpha-2_adrenergic_receptor

deterministic                 0.9156844835738792^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Deterministic_algorithm

competitive ratio             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Competitive_analysis_(online_algorithm)

scheduler                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Scheduling_(computing)

online algorithm              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Online_algorithm      

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

online algorithms             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Online_algorithm      

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

scheduling                    0.9864865049267728^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Scheduling_(computing)

parallel processing           0.9999327467284351^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Parallel_computing    

