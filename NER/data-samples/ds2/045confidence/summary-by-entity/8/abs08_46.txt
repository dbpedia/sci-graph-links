Abstract. Traitor tracing schemes constitute a useful tool against piracy in the context of digital content distribution. They are encryption schemes that can be employed by content providers that wish to deliver content to an exclusive set of users. Each user holds a decryption key that is fingerprinted and bound to his identity. When a pirate decoder is discovered, it is possible to trace the identities of the users that contributed to its construction. In most settings, both the user population and the set of content providers are dynamic, thus scalable user management and scalable provider management are crucial. Previous work on public-key traitor tracing did not address the dynamic scenario thoroughly: no efficient scalable public-key traitor tracing scheme has been proposed, in which the populations of providers and users can change dynamically over time without incurring substantial penalty in terms of system performance and management complexity. To address these issues, we introduce a formal model for Scalable Public-Key Traitor Tracing, and present the first construction of such a scheme. Our model mandates for deterministic traitor tracing and unlimited number of efficient provider and user management operations. We present a formal adversarial model for our system and we prove our construction secure, against both adversaries that attempt to cheat the provider and user management mechanism, and adversaries that attempt to cheat the traitor tracing mechanism.
public-key          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Public-key_cryptography

piracy                        0.9958451941415838^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Copyright_infringement

public-key                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Public-key_cryptography

deterministic                 0.8213989019328571^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Deterministic_algorithm

Traitor Tracing               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Traitor_tracing       

encryption                    0.9999993098758858^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Encryption            

traitor tracing               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Traitor_tracing       

pirate                        0.9609483692312564^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Copyright_infringement

decryption                    0.9999908868635722^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Encryption            

traitor tracing               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Traitor_tracing       

traitor tracing               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Traitor_tracing       

fingerprinted                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Fingerprint           

digital                       0.9645309850946571^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Digital_signal        

decoder                       0.7414833044194655^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Decoder               

traitor tracing               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Traitor_tracing       

Traitor tracing               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Traitor_tracing       

