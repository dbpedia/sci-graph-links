Abstract Maximum A Posteriori (MAP) decoding is a crucial enabler of turbo coding and other powerful feedback-based algorithms. To allow pervasive use of these techniques in resources constrained systems, it is important to limit their implementation complexity, without sacrificing the superior performance they are known for. We show that introducing traceback information into the MAP algorithm, thereby leveraging components that are also part of Soft-Output Viterbi Algorithms (SOVA), offers two unique possibilities to simplify the computational requirements. Our proposed enhancements are effective at each individual decoding iteration and therefore provide gains on top of existing techniques such as early termination and memory optimizations. Based on these enhancements, we will present three new architectural variants for the decoder. Each one of these may be preferable depending on the decoder memory hardware requirements and number of trellis states. Computational complexity is reduced significantly, without incurring significant performance penalty.
algorithm           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

decoder                       0.9629474557437554^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Decoder               

turbo coding                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Turbo_code            

Maximum A Posteriori          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Maximum_a_posteriori_estimation

memory                        0.999943862955363^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Computer_memory       

decoder                       0.9629474557437554^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Decoder               

memory                        0.999943862955363^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Computer_memory       

algorithms                    0.9999999999998863^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

trellis                       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Convolutional_code    

