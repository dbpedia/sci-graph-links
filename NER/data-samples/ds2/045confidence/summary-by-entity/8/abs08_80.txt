Abstract The Burrows-Wheeler transformation is used for effective data compression, e.g., in the well known program bzip2. Compression and decompression are done in a block-wise fashion; larger blocks usually result in better compression rates. With the currently used algorithms for decompression, 4n bytes of auxiliary memory for processing a block of n bytes are needed, 0
<232. This may pose a problem in embedded systems (e.g., mobile phones), where RAM is a scarce resource. In this paper we present algorithms that reduce the memory need without sacrificing speed too much. The main results are: Assuming an input string of n characters, 0
<232, the reverse Burrows-Wheeler transformation can be done with 1.625 n bytes of auxiliary memory and O(n) runtime, using just a few operations per input character. Alternatively, we can use n/t bytes and 256 t n operations. The theoretical results are backed up by experimental data showing the space-time tradeoff.
data compression    0.9999999997260147^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_compression      

space-time tradeoff           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Spaceâ€“time_tradeoff   

memory                        0.9935714353218811^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_data_storage 

bzip2                         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bzip2                 

mobile phones                 0.9999678849437874^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mobile_phone          

RAM                           0.9999200584006661^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Random-access_memory  

embedded systems              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Embedded_system       

decompression                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_compression      

memory                        0.9935714353218811^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_data_storage 

algorithms                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

memory                        0.9935714353218811^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_data_storage 

decompression                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_compression      

compression rates             0.9999994678751415^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_compression      

algorithms                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

