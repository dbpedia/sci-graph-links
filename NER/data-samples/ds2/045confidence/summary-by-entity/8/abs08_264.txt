Abstract We consider the problem of finding a feasible flow in a directed networkG = (N,A) in which each nodei ∈ N has a supplyb(i), and each arc(i,j) ∈ A has a zero lower bound on flow and an upper boundu ij . It is well known that this feasibility problem can be transformed into a maximum flow problem. It is also well known that there is no feasible flow in the networkG if and only if there is a subsetS of nodes such that the net supplies of the nodes inS exceeds the capacity of the arcs emanating fromS. Such a setS is called a“witness of infeasibility” (or, simply, awitness) of the network flow problem. In the case that there are many different witnesses for an infeasible problem, a small cardinality witness may be preferable in practice because it is generally easier for the user to assimilate, and may provide more guidance to the user on how to identify the cause of the infeasibility. Here we show that the problem of finding a minimum cardinality witness is NP-hard. We also consider the problem of determining aminimal witness, that is, a witnessS such that no proper subset ofS is also a witness. In this paper, we show that we can determine a minimal witness by solving a sequence of at mostn maximum flow problems. Moreover, if we use the preflow-push algorithm to solve the resulting maximum flow problems and organize computations properly, then the total time taken by the algorithm is comparable to that of solving a single maximum flow problem. This approach determines a minimal cardinality witness in O(n 2 m 1/2) time using simple data structures and in O(nm logn) time using the standard implementation of the dynamic tree data structures. We also show that the recognition version of the minimal witness problem is equivalent to a recognition version of a related problem known as theminimum rooted cut problem. © 1998 The Mathematical Programming Society, Inc. Published by Elsevier Science B.V.
network flow        0.9995615053095535^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Flow_network          

tree data structures          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Tree_(data_structure) 

maximum flow problem          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Maximum_flow_problem  

cardinality                   0.9999998655496346^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cardinality           

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

proper subset                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Subset                

maximum flow problems         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Maximum_flow_problem  

nm                            0.9999673642185412^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Nanometre             

maximum flow problems         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Maximum_flow_problem  

NP-hard                       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/NP-hard               

cardinality                   0.9999998655496346^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cardinality           

Elsevier Science              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Elsevier              

Mathematical Programming Society1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Mathematical_Optimization_Society

data structures               0.9999999999267857^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_structure        

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

maximum flow problem          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Maximum_flow_problem  

cardinality                   0.9999998655496346^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cardinality           

