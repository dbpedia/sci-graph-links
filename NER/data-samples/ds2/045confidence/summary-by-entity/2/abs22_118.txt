Summary A variant of the drinking philosophers algorithm of Chandy and Misra is described and proved correct in a modular way. The algorithm of Chandy and Misra is based on a particular dining philosophers algorithm and relies on certain properties of its implementation. The drinking philosophers algorithm presented in this paper is able to use an arbitrary dining philosophers algorithm as a subroutine; nothing about the implementation needs to be known, only that it solves the dining philosophers problem. An important advantage of this modularity is that by substituting a more time-efficient dining philosophers algorithm than the one used by Chandy and Misra, a drinking philosophers algorithm withO(1) worst-case waiting time is obtained, whereas the drinking philosophers algorithm of Chandy and Misra hasO(n) worst-case waiting time (forn philosophers). Careful definitions are given to distinguish the drinking and dining philosophers problems and to specify varying degrees of concurrency.
algorithm           0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

subroutine                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Subroutine            

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

dining philosophers problem   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Dining_philosophers_problem

concurrency                   0.8340408252067105^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Concurrency_(computer_science)

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     0.9999999999999432^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

