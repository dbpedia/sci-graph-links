Abstract Keccak-based algorithms such as Secure Hash Algorithm-3 (SHA-3) will be widely used in cryptosystems, and evaluating their security against different kinds of attacks is vitally important. This paper presents an efficient differential fault analysis (DFA) method on all four modes of SHA-3 to recover an entire internal state, which leads to message recovery in the regular hashing mode and key retrieval in the message authentication code (MAC) mode. We adopt relaxed fault models in this paper, assuming the attacker can inject random single-byte faults into the penultimate round input of SHA-3. We also propose algorithms to find the lower bound on the number of fault injections needed to recover an entire internal state for the proposed attacks. Results show that on average, the attacker needs about 120 random faults to recover an internal state, while he needs 17 faults at best if he has control of the faults injected. The proposed attack method is further extended for systems with input messages longer than the bitrate.
algorithms          0.98195008822737^^http://www.w3.org/2001/XMLSchema#double             http://dbpedia.org/resource/Algorithm             

Secure Hash Algorithm         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Secure_Hash_Algorithm 

bitrate                       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bit_rate              

differential                  0.8098623819484198^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Differential_cryptanalysis

cryptosystems                 0.988329533188^^http://www.w3.org/2001/XMLSchema#double               http://dbpedia.org/resource/Cryptosystem          

SHA-3                         0.9999831587493215^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/NIST_hash_function_competition

algorithms                    0.98195008822737^^http://www.w3.org/2001/XMLSchema#double             http://dbpedia.org/resource/Algorithm             

SHA-3                         0.9999831587493215^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/NIST_hash_function_competition

SHA-3                         0.9999831587493215^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/NIST_hash_function_competition

message authentication code   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Message_authentication_code

MAC                           0.9999999999997726^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Message_authentication_code

DFA                           0.9964714792347201^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Finite-state_machine  

