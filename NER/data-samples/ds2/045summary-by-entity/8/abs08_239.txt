Abstract This paper proposes and analyzes an approach for design of stream ciphers based on joint computing over random and secret data. Feasibility of encryption/ decryption computation when the ciphertext involve pure random data is shown. The core element of the proposed approach for stream ciphering is a pseudo-random embedding of the random bits into the ciphertext and this embedding plays role of a homophonic encoding. The initial ciphertext with the embedded random bits is further on intentionally degraded by its exposure to a moderate noise which can be modelled as the binary symmetric channel effect. A security evaluation of the proposed approach implies that its security appears as a consequence of hardness of the LPN problem, as well. The developed design has potential of providing that complexity of recovering the secret key in the known plaintext attack scenario is close to the complexity of recovering the secret key via the exhaustive search, i.e. close to the maximal possible one for the given size of the secret key. The proposed approach can be considered as a trade-off between the increased security and decreased communications efficiency which in a number of scenarios appears as a suitable one.
encryption          0.57071533635181^^http://www.w3.org/2001/XMLSchema#double             http://dbpedia.org/resource/Encryption            

ciphertext                    0.9926237435773778^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Ciphertext            

secret key                    0.999992174729336^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Key_(cryptography)    

pseudo-random                 0.9673214789673551^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cryptographically_secure_pseudorandom_number_generator

LPN                           0.9999999988829131^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Licensed_practical_nurse

ciphertext                    0.9926237435773778^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Ciphertext            

stream ciphers                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Stream_cipher         

homophonic                    0.48822543185391315^^http://www.w3.org/2001/XMLSchema#double          http://dbpedia.org/resource/Texture_(music)       

binary symmetric channel      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Binary_symmetric_channel

decryption                    0.9039817725686328^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cryptography          

plaintext                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Plaintext             

secret key                    0.999992174729336^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Key_(cryptography)    

secret key                    0.999992174729336^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Key_(cryptography)    

ciphertext                    0.9926237435773778^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Ciphertext            

