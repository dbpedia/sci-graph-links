Abstract The data migration problem is the problem of computing a plan for moving data objects stored on devices in a network from one configuration to another. Load balancing or changing usage patterns might necessitate such a rearrangement of data. In this paper, we consider the case where the objects are fixed-size and the network is complete. Our results are both theoretical and empirical. Our main theoretical results are (1) a polynomial time algorithm for finding a near-optimal migration plan in the presence of space constraints when a certain number of additional nodes is available as temporary storage, and (2) a 3/2-approximation algorithm for the case where data must be migrated directly to its destination. We also run extensive experiments on several algorithms for various data migration problems and show that empirically, many algorithms perform better in practice than their theoretical bounds suggest. We conclude that many of the algorithms we present are both practical and effective for data migration.
network             0.9990083416868953^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_network      

algorithms                    0.9999804246810212^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

data migration                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_migration        

computing                     0.5790817218267765^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computation           

algorithms                    0.9999804246810212^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

Load balancing                0.999999999994543^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Load_balancing_(computing)

rearrangement                 0.9715038061116118^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Rearrangement_reaction

nodes                         0.598965852890238^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Node_(networking)     

empirically                   0.9999417545400433^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Empirical_evidence    

data migration                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_migration        

data objects                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Object_(computer_science)

approximation algorithm       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Approximation_algorithm

data migration                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_migration        

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

migration                     0.9995079300234758^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Human_migration       

algorithms                    0.9999804246810212^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

empirical                     0.9999921101870969^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Empirical_evidence    

network                       0.9990083416868953^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_network      

polynomial time               0.999984119275517^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Time_complexity       

