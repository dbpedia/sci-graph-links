Abstract. Scalable storage architectures allow for the addition or removal of storage devices to increase storage capacity and bandwidth or retire older devices. Assuming random placement of data objects across multiple storage devices of a storage pool, our optimization objective is to redistribute a minimum number of objects after scaling the pool. In addition, a uniform distribution, and hence a balanced load, should be ensured after redistribution. Moreover, the redistributed objects should be retrieved efficiently during the normal mode of operation: in one I/O access and with low complexity computation. To achieve this, we propose an algorithm called random disk labeling (RDL), based on double hashing, where storage can be added or removed without any increase in complexity. We compare RDL with other proposed techniques and demonstrate its effectiveness through experimentation.
optimization        0.46246810149689316^^http://www.w3.org/2001/XMLSchema#double          http://dbpedia.org/resource/Program_optimization  

bandwidth                     0.9999990078007761^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bandwidth_(computing) 

I/O                           0.9999999997976374^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Input/output          

RDL                           0.986841439077334^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Report_Definition_Language

uniform distribution          0.9999978019734781^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Uniform_distribution_(discrete)

normal mode                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Normal_mode           

RDL                           0.986841439077334^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Report_Definition_Language

double hashing                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Double_hashing        

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

data objects                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Object_(computer_science)

computation                   0.9885041480252166^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computing             

