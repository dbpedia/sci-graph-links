Abstract An algorithm for the point-location problem in 2D finite element meshes as a special case of plane straight-line graphs (PSLG) is presented. The element containing a given point P is determined combining a quadtree data structure to generate a quaternary search tree and a local search wave using adjacency information. The preprocessing construction of the search tree has a complexity ofO(n·log(n)) and requires only pointer swap operations. The query time to locate a start element for local search isO(log(n)) and the final point search by ‘point-in-polygon’ tests is independent of the total number of elements in the mesh and thus determined in constant time. Although the theoretical efficiency estimates are only given for quasi-uniform meshes, it is shown in numerical examples, that the algorithm performs equally well for meshes with extreme local refenement.
meshes              0.9999999999030251^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Polygon_mesh          

preprocessing                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Preprocessor          

independent                   0.9999999999995453^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Independence_(probability_theory)

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

finite element meshes         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Finite_element_method 

wave                          0.9061113801805317^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wave                  

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

mesh                          0.9999999153658372^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Polygon_mesh          

search tree                   0.9983802848362291^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Binary_search_tree    

quaternary                    0.9981594295086735^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Biomolecular_structure

search tree                   0.9983802848362291^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Binary_search_tree    

graphs                        0.9974245498209326^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graph_(mathematics)   

constant time                 0.9999999464159842^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/time_complexity       

ofO                           0.6444895756794041^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mosopelea             

local search                  0.9999999996870201^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Local_search_(optimization)

local search                  0.9999999996870201^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Local_search_(optimization)

quadtree                      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Quadtree              

meshes                        0.9999999999030251^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Polygon_mesh          

2D                            0.9999602941602393^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cartesian_coordinate_system

pointer                       0.9999999997361328^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Pointer_(computer_programming)

data structure                0.9999999999760121^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_structure        

