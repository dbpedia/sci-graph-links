Abstract We consider a simple restriction of the PRAM model (called PPRAM), where the input is arbitrarily partitioned between a fixed set of p processors and the shared memory is restricted to m cells. This model allows for investigation of the tradeoffs/ bottlenecks with respect to the communication bandwidth (modeled by the shared memory size m ) and the number of processors p . The model is quite simple and allows the design of optimal algorithms without losing the effect of communication bottlenecks. We have focused on the PPRAM complexity of problems that have $\tilde{O}$ (n) sequential solutions (where n is the input size), and where m ≤ p ≤ n . We show essentially tight time bounds (up to logarithmic factors) for several problems in this model such as summing, Boolean threshold, routing, integer sorting, list reversal and k -selection. We get typically two sorts of complexity behaviors for these problems: One type is $\tilde{O}$ (n/p   p/m) , which means that the time scales with the number of processors and with memory size (in appropriate ranges) but not with both. The other is $\tilde{O}$ (n/m) , which means that the running time does not scale with p and reflects a communication bottleneck (as long as m < p ). We are not aware of any problem whose complexity scales with both p and m (e.g. $O(n/\sqrt{m \cdot p})$ ). This might explain why in actual implementations one often fails to get p -scalability for p close to n .
shared memory       0.9993770338508161^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Parallel_random-access_machine

cells                         0.9999101630996053^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cell_(biology)        

integer sorting               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Integer_sorting       

communication                 0.6111477763516585^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Inter-process_communication

communication                 0.6111477763516585^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Inter-process_communication

processors                    0.999999999840611^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Central_processing_unit

memory                        0.9444158780561709^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_memory       

logarithmic                   0.9888887411922391^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Logarithm             

bottlenecks                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bottleneck            

Boolean                       0.99994899061493^^http://www.w3.org/2001/XMLSchema#double             http://dbpedia.org/resource/Boolean_algebra       

bottlenecks                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bottleneck            

communication                 0.6111477763516585^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Inter-process_communication

scales                        0.5205004890944156^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Scale_model           

processors                    0.999999999840611^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Central_processing_unit

scales                        0.5205004890944156^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Scale_model           

processors                    0.999999999840611^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Central_processing_unit

input size                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Information           

scalability                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Scalability           

shared memory                 0.9993770338508161^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Parallel_random-access_machine

PRAM                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Parallel_random-access_machine

partitioned                   0.9999999999986358^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Partition_of_a_set    

bottleneck                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bottleneck            

bandwidth                     0.9988837584483268^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bandwidth_(signal_processing)

algorithms                    0.9999999861687457^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

routing                       0.9999943969198825^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Routing               

cdot                          0.8781141632135986^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Connecticut_Department_of_Transportation

