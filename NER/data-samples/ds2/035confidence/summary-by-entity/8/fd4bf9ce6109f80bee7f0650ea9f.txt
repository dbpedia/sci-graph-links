Abstract An elastic and highly available data store is a key component of many cloud applications. Existing data stores with strong consistency guarantees are designed and optimized for small updates, key-value access, and (if supported) small range queries over a predefined key column. This raises performance and availability problems for applications which inherently require large updates, non-key access, and large range queries. This paper presents a solution to these problems: Crescando/RB; a distributed, scan-based, main memory, relational data store (single table) with robust performance and high availability. The system addresses a real, large-scale industry use case: the Amadeus travel management system. This paper focuses on the distribution layer of Crescando/RB, the problem and theory behind it, the rationale underlying key design decisions, and the novel multicast protocol and replication framework it is composed of. Highlighting the key features of the distribution layer, we present experimental results showing that even under permanent node failures and large-scale data repartitioning, Crescando/RB remains fully available and capable of sustaining a heavy query and update load.
data store          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_store            

multicast                     0.9999217773037261^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Multicast             

range queries                 0.9999999999839702^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Range_queries         

RB                            0.5604029170058884^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Regionalbahn          

Amadeus                       0.9194110225350777^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Amadeus_IT_Group      

range queries                 0.9999999999839702^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Range_queries         

RB                            0.5604029170058884^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Regionalbahn          

RB                            0.5604029170058884^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Regionalbahn          

single                        0.9992460162267968^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Single_(music)        

cloud                         0.9999999999719194^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cloud_computing       

protocol                      0.999999978746928^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Communications_protocol

relational data               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Relational_database   

elastic                       0.9938349539677216^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Elasticity_(physics)  

node                          0.9999999819536926^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

replication                   0.9999999999997726^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Replication_(computing)

high availability             0.9694399681923971^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/High_availability     

main memory                   0.9999993474559543^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_data_storage 

