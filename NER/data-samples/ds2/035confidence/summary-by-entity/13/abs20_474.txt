Abstract Higher-order programming languages (i.e., languages in which procedures or labels can occur as values) are usually defined by interpreters that are themselves written in a programming language based on the lambda calculus (i.e., an applicative language such as pure LISP). Examples include McCarthy's definition of LISP, Landin's SECD machine, the Vienna definition of PL/I, Reynolds' definitions of GEDANKEN, and recent unpublished work by L. Morris and C. Wadsworth. Such definitions can be classified according to whether the interpreter contains higher-order functions, and whether the order of application (i.e., call by value versus call by name) in the defined language depends upon the order of application in the defining language. As an example, we consider the definition of a simple applicative programming language by means of an interpreter written in a similar language. Definitions in each of the above classifications are derived from one another by informal but constructive methods. The treatment of imperative features such as jumps and assignment is also discussed.
PL/I                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/PL/I                  

applicative                   0.892804366267509^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Applicative_programming_language

imperative                    0.999800032159412^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Imperative_programming

higher-order functions        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Higher-order_function 

lambda calculus               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Lambda_calculus       

language                      0.999999999875854^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Programming_language  

LISP                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Lisp_(programming_language)

interpreter                   0.9999998956981299^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Interpreter_(computing)

programming language          0.9999999815241838^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Programming_language  

Vienna                        0.9999626600117878^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Vienna                

interpreters                  0.9999999999688498^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Interpreter_(computing)

Landin                        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Peter_Landin          

programming languages         0.9999999994146265^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Programming_language  

language                      0.999999999875854^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Programming_language  

Morris                        0.6748586655865907^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Morris_Motors         

applicative programming       0.9999999999998863^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Applicative_programming_language

interpreter                   0.9999998956981299^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Interpreter_(computing)

Wadsworth                     0.5419801896112174^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wadsworth_(surname)   

LISP                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Lisp_(programming_language)

language                      0.999999999875854^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Programming_language  

language                      0.999999999875854^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Programming_language  

C.                            0.9994380761918861^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Celsius               

language                      0.999999999875854^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Programming_language  

SECD machine                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/SECD_machine          

