Abstract Improving testability during the early stages of the design flow can have several benefits, including significantly improved fault coverage, reduced test hardware overheads, and reduced design iteration times. This paper presents an overview of high-level design methodologies that consider testability during the early (behavior and architecture) stages of the design flow, and their testability benefits. The topics reviewed include behavioral and RTL test synthesis approaches that generate easily testable implementations targeting ATPG (full and partial scan) and BIST methodologies, and techniques to use high-level information for ATPG.
fault coverage      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Fault_coverage        

design methodologies          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Design_methods        

overheads                     0.9993870833788956^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Overhead_(computing)  

hardware                      0.8671848652273395^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Hardware_description_language

partial scan                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Scan_chain            

testability                   0.993883360860846^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Testability           

design flow                   0.9999997381644677^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Design_flow_(EDA)     

architecture                  0.7548061292287813^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_architecture 

testability                   0.993883360860846^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Testability           

RTL                           0.9999999999993747^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Register-transfer_level

testability                   0.993883360860846^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Testability           

iteration                     0.8935617825440803^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Iterative_and_incremental_development

design flow                   0.9999997381644677^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Design_flow_(EDA)     

