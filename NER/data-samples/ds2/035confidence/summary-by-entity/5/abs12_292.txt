Abstract An object-oriented framework in essence defines an architecture for a family of applications or subsystems in a given domain. Every application in the family obeys these architectural restrictions. Such frameworks are typically delivered as collections of inter-dependent abstract classes, together with their concrete subclasses. The abstract classes and their interdependencies implicitly realize the architecture. Developing a new application reusing classes of a framework requires a thorough understanding of the framework architecture. We introduce an approach called “Design by Framework Completion”, in which an exemplar (an executable visual model for a minimal instantiation of the architecture) is used for documenting frameworks. We propose exploration of exemplars as a means for learning the architecture, following which new applications can be built by replacing selected pieces of the exemplar. For the piece to be replaced, the inheritance lattice around its class provides the space of alternatives, one of these classes may be suitably adapted (say, by sub-classing) to create the new replacement. “Design by Framework Completion” proposes a paradigm shift when designing in presence of reusable components: It enables a much simpler “top-down” approach for creating applications, as opposed to the prevalent “search for components and assemble them bottom-up” strategy. We believe that this paradigm shift is essential because components can only be fitted together if they all obey the same architectural rules that govern the framework.
architecture        0.9999999907743131^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Software_architecture 

abstract classes              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Abstract_type         

executable                    0.9718216474056113^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Subroutine            

architecture                  0.9999999907743131^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Software_architecture 

family                        0.9999868924868021^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Family                

domain                        0.9999912343681594^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Domain_of_a_function  

family                        0.9999868924868021^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Family                

bottom-up                     0.9999999999994316^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Top-down_and_bottom-up_design

lattice                       0.9012800879656466^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Lattice_(order)       

subclasses                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Inheritance_(object-oriented_programming)

object-oriented               0.9994677588865121^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Object-oriented_programming

architecture                  0.9999999907743131^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Software_architecture 

paradigm shift                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Paradigm_shift        

top-down                      0.9999999999998863^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Top-down_and_bottom-up_design

architecture                  0.9999999907743131^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Software_architecture 

reusable                      0.9999999996698534^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Code_reuse            

architecture                  0.9999999907743131^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Software_architecture 

paradigm shift                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Paradigm_shift        

inheritance                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Inheritance_(object-oriented_programming)

concrete                      0.6039641321214579^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Abstract_and_concrete 

abstract classes              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Abstract_type         

