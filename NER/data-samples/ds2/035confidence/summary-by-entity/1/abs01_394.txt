Abstract Many real-world optimization problems are large-scale in nature. In order to solve these problems, an optimization algorithm is required that is able to apply a global search regardless of the problemsâ€™ particularities. This paper proposes a self-adaptive differential evolution algorithm, called jDElscop, for solving large-scale optimization problems with continuous variables. The proposed algorithm employs three strategies and a population size reduction mechanism. The performance of the jDElscop algorithm is evaluated on a set of benchmark problems provided for the Special Issue on the Scalability of Evolutionary Algorithms and other Metaheuristics for Large Scale Continuous Optimization Problems. Non-parametric statistical procedures were performed for multiple comparisons between the proposed algorithm and three well-known algorithms from literature. The results show that the jDElscop algorithm can deal with large-scale continuous optimization effectively. It also behaves significantly better than other three algorithms used in the comparison, in most cases.
algorithm           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithms                    0.9999999999984084^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

optimization                  0.9999999994107611^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

Evolutionary Algorithms       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Evolutionary_algorithm

variables                     0.988450453603475^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Variable_(mathematics)

differential evolution        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Differential_evolution

multiple comparisons          0.9999983096361764^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Multiple_comparisons_problem

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

optimization problems         0.9990851027107256^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

optimization problems         0.9990851027107256^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

population size               0.9999012631032277^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Population_size       

continuous optimization       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Continuous_optimization

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

benchmark                     0.8962684175529088^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Benchmarking          

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithms                    0.9999999999984084^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

Scalability                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Scalability           

literature                    0.9998549475611493^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Literature            

continuous                    0.5710338443683842^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Probability_distribution

