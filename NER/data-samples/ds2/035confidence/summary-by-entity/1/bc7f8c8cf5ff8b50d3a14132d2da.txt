Abstract Complex numerical methods often contain subproblems that are easy to state in mathematical form, but difficult to translate into software. Several algorithmic isues of this nature arise in implementing a Newton iteration scheme as part of a finite-difference method for two-point boundary value problems. We describe the practical as well as theoretical considerations behind the decisions included in the final code, with special emphasis on two “watchdog” strategies designed to improve reliability and allow early termination of the Newton iterates.
iterates            0.9999997399506012^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Iteration             

software                      0.913957127281254^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Software_engineering  

Newton iteration              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Newton's_method       

finite-difference             0.5420484992370114^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Finite_difference     

Newton                        0.9999971388159001^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Isaac_Newton          

mathematical                  0.7699101262156293^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematics           

algorithmic                   0.999999999114209^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Algorithm             

numerical methods             0.9999929531731935^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Numerical_analysis    

