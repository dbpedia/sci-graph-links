Abstract An approach for designing optimal repetitive structures under arbitrary static loading is presented. It is shown that the analysis of such infinite structures can be reduced to the analysis of the repeating module under transformed loading and boundary conditions. Consequently, both the design parameters and the analysis variables constitute a relatively small set which facilitates the optimization process. The approach hinges on the representative cell method. It is based on formulating the analysis equations and the continuity conditions for a sequence of typical modules. Then, by means of the discrete Fourier transform this problem translates into a boundary value problem of a representative cell in transformed variables, which can be solved by any appropriate analytical or numerical method. The real structural response any-where in the structure is then obtained by the inverse transform. The sensitivities can also be calculated on the basis of the sensitivities of the representative cell. The method is illustrated by the design for minimum compliance with a volume constraint of an infinite plane truss. It is shown that by employing this analysis method within an optimal design scheme one can incorporate a reduced analysis problem in an intrinsically small design space.
modules             0.9997698891953195^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Module_(mathematics)  

inverse transform             0.999935153081779^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Inversive_geometry    

module                        0.9999685018556805^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Module_(mathematics)  

boundary conditions           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Boundary_value_problem

sequence                      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Sequence              

numerical method              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Numerical_analysis    

cell                          0.9999600153571077^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cell_(biology)        

continuity                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Continuous_function   

optimization                  0.9999999999997726^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

infinite                      0.9921300319060962^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Series_(mathematics)  

cell                          0.9999600153571077^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cell_(biology)        

variables                     0.9999999415321116^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Variable_(mathematics)

discrete Fourier transform    0.9963737481850441^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Fast_Fourier_transform

optimal design                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Optimal_design        

infinite                      0.9921300319060962^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Series_(mathematics)  

cell                          0.9999600153571077^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cell_(biology)        

truss                         0.9999999536098596^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Truss                 

variables                     0.9999999415321116^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Variable_(mathematics)

