Abstract. We propose a new multi-attribute index. Our approach combines the hB-tree, a multi-attribute index, and the $\Pi$-tree, an abstract index which offers efficient concurrency and recovery methods. We call the resulting method the hB $^\Pi$-tree. We describe several versions of the hB $^\Pi$-tree, each using a different node-splitting and index-term-posting algorithm. We also describe a new node deletion algorithm. We have implemented all the versions of the hB $^\Pi$-tree. Our performance results show that even the version that offers no performance guarantees, actually performs very well in terms of storage utilization, index size (fan-out), exact-match and range searching, under various data types and distributions. We have also shown that our index is fairly insensitive to increases in dimension. Thus, it is suitable for indexing high-dimensional applications. This property and the fact that all our versions of the hB $^\Pi$-tree can use the $\Pi$-tree concurrency and recovery algorithms make the hB $^\Pi$-tree a promising candidate for inclusion in a general-purpose DBMS.
fan-out             0.9999999999995453^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Fan-out               

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

range searching               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Range_searching       

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

algorithms                    0.9999999829029776^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

data types                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_type             

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

concurrency                   0.9702733422398776^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Concurrency_control   

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

dimension                     0.9999899542905084^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Dimension_(mathematics_and_physics)

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

abstract                      0.9832732097489182^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Abstraction_(computer_science)

node                          0.9926081702601309^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

general-purpose DBMS          0.9999999999727152^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/database              

concurrency                   0.9702733422398776^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Concurrency_control   

tree                          0.9999438421811694^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

