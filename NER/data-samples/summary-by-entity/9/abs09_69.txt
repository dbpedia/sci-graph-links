Data‐flow (DF) testing was introduced to achieve more comprehensive structural evaluation of programs. It requires tests that traverse a path in which the definition of a variable and its subsequent use, i.e., a definition‐use association (dua), is exercised. However, DF testing has rarely been adopted in industry because it is considered too costly by practitioners. A factor precluding broad adoption of DF testing is the cost of tracking duas exercised by tests. Previous approaches rely on complex computations and expensive data structures to collect dua coverage. We present an algorithm which utilizes efficient bitwise operations and inexpensive data structures to track intra‐procedural duas. RAM memory requirements are restricted to three bit vectors the size of the number of duas. Conservative simulations indicate that the new algorithm imposes less execution slowdown.
RAM                 0.861697612482993^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Random-access_memory  

DF                            0.7289129508405244^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Direction_finding     

bit vectors                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bit_array             

memory                        0.8372912359328673^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_data_storage 

duas                          0.9999993011253023^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Dua                   

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

Conservative                  0.6226923894074511^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Conservative_Party_(UK)

bitwise operations            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bitwise_operation     

data structures               0.9999999511436511^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_structure        

dua                           0.9999993011253023^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Dua                   

dua                           0.9999993011253023^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Dua                   

data structures               0.9999999511436511^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_structure        

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

duas                          0.9999993011253023^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Dua                   

DF                            0.7289129508405244^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Direction_finding     

duas                          0.9999993011253023^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Dua                   

adoption                      0.9999840187123573^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Adoption              

DF                            0.7289129508405244^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Direction_finding     

