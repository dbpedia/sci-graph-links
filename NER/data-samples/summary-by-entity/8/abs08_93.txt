Abstract In a world where trusting software systems is increasingly important, formal methods and formal proof can help provide some basis for trust. Proof checking can help to reduce the size of the trusted base since we do not need to trust an entire theorem prover: instead, we only need to trust a (smaller and simpler) proof checker. Many approaches to building proof checkers require embedding within them a full programming language. In most modern proof checkers and theorem provers, that programming language is a functional programming language, often a variant of ML. In fact, aspects of ML (e.g., strong typing, abstract datatypes, and higher-order programming) were designed to make ML a trustworthy “meta-language” for checking proofs. While there is considerable overlap between logic programming and proof checking (e.g., both benefit from unification, backtracking search, efficient term structures, etc.), the discipline of logic programming has, in fact, played a minor role in the history of proof checking. I will argue that logic programming can have a major role in the future of this important topic.
embedding           0.6898831310940228^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Injective_function    

checkers                      0.9986923360025737^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Draughts              

meta-language                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Metalanguage          

theorem prover                0.9999999984461283^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Automated_theorem_proving

trust                         0.9999811667123566^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Trust_(social_sciences)

functional programming language1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Functional_programming

trust                         0.9999811667123566^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Trust_(social_sciences)

proof checker                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Automated_proof_checking

theorem provers               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Automated_theorem_proving

abstract                      0.9994396101330574^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Abstraction_(computer_science)

ML                            0.9999705656767277^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/ML_(programming_language)

trust                         0.9999811667123566^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Trust_(social_sciences)

programming language          0.9999994641347328^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Programming_language  

software systems              0.9995997977014653^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Software              

checkers                      0.9986923360025737^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Draughts              

logic programming             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Logic_programming     

higher-order programming      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Higher-order_programming

programming language          0.9999994641347328^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Programming_language  

backtracking search           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Backtracking          

ML                            0.9999705656767277^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/ML_(programming_language)

logic programming             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Logic_programming     

formal proof                  0.9854183118778378^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_proof    

formal methods                0.999999999742613^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Formal_methods        

logic programming             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Logic_programming     

Proof                         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Mathematical_proof    

strong typing                 0.9999999999998863^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Strong_and_weak_typing

ML                            0.9999705656767277^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/ML_(programming_language)

datatypes                     0.9999999999998863^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_type             

