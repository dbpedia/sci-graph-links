Abstract In recent years, graphics processing units (GPUs) have emerged as a powerful architecture for solving a broad spectrum of applications in very short periods of time. However, most existing GPU optimization approaches do not exploit the full power available in a CPU–GPU platform. They have a tendency to leave one of them partially unused (usually the CPU) and fail to establish an accurate exchange of information that could help solve the target problem efficiently. Thus, better performance is expected from devising a hybrid CPU–GPU parallel algorithm that combines the highly parallel stream processing power of GPUs with the higher power of multi-core architectures. We have developed a hybrid methodology to efficiently solve optimization problems. We use a hybrid CPU–GPU architecture, to benefit from running it, in parallel, on both the CPU and the GPU. Our experiments over a heterogeneous set of combinatorial optimization problems with increasing dimensionality show a time gain of up to $$365\times $$ 365× in our proposal, while demonstrating high numerical accuracy. This work is intended to open up a new line of research that matches both architectures with new algorithms and cooperation techniques.
hybrid              0.9999354766816841^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Hybrid_algorithm      

optimization problems         0.9995304851432167^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

heterogeneous                 0.9722377573535697^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Heterogeneous_computing

algorithms                    0.9999999999986358^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

architecture                  0.999332598681669^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Computer_architecture 

hybrid                        0.9999354766816841^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Hybrid_algorithm      

parallel algorithm            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Parallel_algorithm    

CPU                           0.9999999995504822^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

combinatorial optimization    0.9999121505139844^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

methodology                   0.9999979038731595^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Methodology           

GPU                           0.9998108962018998^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graphics_processing_unit

dimensionality                0.9999543293772319^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Curse_of_dimensionality

stream processing             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Stream_processing     

GPUs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Graphics_processing_unit

CPU                           0.9999999995504822^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

optimization                  0.9999919883571574^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

graphics processing units     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Graphics_processing_unit

multi-core                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Multi-core_processor  

GPUs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Graphics_processing_unit

GPU                           0.9998108962018998^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graphics_processing_unit

architecture                  0.999332598681669^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Computer_architecture 

spectrum                      0.6814583728941755^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Spectrum              

hybrid                        0.9999354766816841^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Hybrid_algorithm      

