Abstract Let $$P$$ P and $$Q$$ Q be two simple polygons in the plane of total complexity n, each of which can be decomposed into at most k convex parts. We present a $$(1-\varepsilon )$$ (1-ε) -approximation algorithm, for finding the translation of $$Q$$ Q , which maximizes its area of overlap with $$P$$ P . Our algorithm runs in $$O\left( {c n}\right) $$ Ocn time, where c is a constant that depends only on k and $$\varepsilon $$ ε . This suggests that for polygons that are “close” to being convex, the problem can be solved (approximately), in near linear time.
simple polygons     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Simple_polygon        

approximation algorithm       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Approximation_algorithm

Ocn                           0.6873169322821971^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Nippon_Telegraph_and_Telephone

linear time                   0.9999995392863563^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Time_complexity       

convex                        0.9919646774945566^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Convex_set            

convex                        0.9919646774945566^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Convex_set            

translation                   0.999999999933948^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Translation_(geometry)

polygons                      0.9999680739341452^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Polygon               

runs                          0.9268040712102293^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Run_(baseball)        

algorithm                     0.9999999999997726^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

