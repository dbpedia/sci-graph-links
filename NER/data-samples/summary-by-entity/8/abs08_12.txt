Abstract Steiner tree problems (STPs) are very important in both theory and practice. In this paper, we introduce a powerful swap-vertex move operator which can be used as a basic element of any neighborhood search heuristic to solve many STP variants. Given the incumbent solution tree T, the swap-vertex move operator exchanges a vertex in T with another vertex out of T, and then attempts to construct a minimum spanning tree, leading to a neighboring solution (if feasible). We develop a series of dynamic data structures, which allow us to efficiently evaluate the feasibility of swap-vertex moves. Additionally, in order to discriminate different swap-vertex moves corresponding to the same objective value, we also develop an auxiliary evaluation function. We present a computational assessment based on a number of challenging problem instances (corresponding to three representative STP variants) which clearly shows the effectiveness of the techniques introduced in this paper. Particularly, as a key element of our KTS algorithm which participated in the 11th DIMACS implementation challenge, the swap-vertex operator as well as the auxiliary evaluation function contributed significantly to the excellent performance of our algorithm.
heuristic           0.5816271346106644^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Heuristic_(computer_science)

STP                           0.9970830286165482^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Straight-through_processing

vertex                        0.8142458186701265^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graph_(mathematics)   

incumbent                     0.8997360817542139^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Incumbent_local_exchange_carrier

tree                          0.7267480868315246^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tree_(data_structure) 

basic element                 0.6537888884666541^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Basic_Element_(music_group)

KTS                           0.9999846018438122^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Order_of_the_Tower_and_Sword

vertex                        0.8142458186701265^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graph_(mathematics)   

STP                           0.9970830286165482^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Straight-through_processing

evaluation function           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Evaluation_function   

STPs                          0.9999999999394049^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Signal_Transfer_Point 

dynamic data structures       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Dynamization          

DIMACS                        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/DIMACS                

auxiliary                     0.9990002102660545^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Auxiliary_verb        

neighborhood                  0.9999997085341618^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Neighbourhood_(mathematics)

minimum spanning tree         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Minimum_spanning_tree 

Steiner tree                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Steiner_tree_problem  

auxiliary                     0.9990002102660545^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Auxiliary_verb        

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

evaluation function           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Evaluation_function   

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

