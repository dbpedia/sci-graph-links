Data‐flow (DF) testing was introduced to achieve more comprehensive structural evaluation of programs. It requires tests that traverse a path in which the definition of a variable and its subsequent use, i.e., a definition‐use association (dua), is exercised. However, DF testing has rarely been adopted in industry because it is considered too costly by practitioners. A factor precluding broad adoption of DF testing is the cost of tracking duas exercised by tests. Previous approaches rely on complex computations and expensive data structures to collect dua coverage. We present an algorithm which utilizes efficient bitwise operations and inexpensive data structures to track intra‐procedural duas. RAM memory requirements are restricted to three bit vectors the size of the number of duas. Conservative simulations indicate that the new algorithm imposes less execution slowdown.
