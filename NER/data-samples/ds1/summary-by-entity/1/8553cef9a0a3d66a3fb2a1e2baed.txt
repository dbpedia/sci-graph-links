Abstract Instance sparsification is well-known in the world of exact computation since it is very closely linked to the Exponential Time Hypothesis. In this paper, we extend the concept of sparsification in order to capture subexponential time approximation. We develop a new tool for inapproximability, called approximation preserving sparsification, and use it in order to get strong inapproximability results in subexponential time for several fundamental optimization problems such as min dominating set , min feedback vertex set , min set cover, min feedback arc set, and others.
optimization problems0.9982624967551459^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Optimization_problem  

feedback vertex set           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Feedback_vertex_set   

feedback arc set              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Feedback_arc_set      

approximation                 0.9999999998412363^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Approximation_algorithm

approximation                 0.9999999998412363^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Approximation_algorithm

computation                   0.9999732014033018^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computation           

dominating set                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Dominating_set        

Exponential                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Exponential_growth    

subexponential time           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Time_complexity       

subexponential time           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Time_complexity       

set cover                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Set_cover_problem     

