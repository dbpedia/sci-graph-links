Abstract To investigate the behavior of biochemical systems, many runs of Gillespie’s Stochastic Simulation Algorithm (SSA) are generally needed, causing excessive computational costs on Central Processing Units (CPUs). Since all SSA runs are independent, the Intel Xeon Phi coprocessors based on the Many Integrated Core (MIC) architecture can be exploited to distribute the workload. We considered two execution modalities on MIC: one consisted in running exactly the same CPU code of SSA, while the other exploited MIC’s vector instructions to reuse the CPU code with only few modifications. MIC performance was compared with Graphics Processing Units (GPUs), specifically implemented in CUDA to optimize the use of memory hierarchy. Our results show that GPU largely outperforms MIC and CPU, but required a complete redesign of SSA. MIC allows a relevant speedup, especially when vector instructions are used, with the additional advantage of requiring minimal modifications to CPU code.
Intel Xeon Phi      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Intel_MIC             

CPUs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Central_processing_unit

independent                   0.999999992274752^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Independence_(probability_theory)

CPU                           0.9999999999752163^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

runs                          0.8531582233476163^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Run_(baseball)        

SSA                           0.9999999999331521^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Static_single_assignment_form

biochemical systems           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Biochemistry          

runs                          0.8531582233476163^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Run_(baseball)        

memory hierarchy              0.9999994634011121^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_hierarchy      

SSA                           0.9999999999331521^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Static_single_assignment_form

GPUs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Graphics_processing_unit

Intel                         0.7735564287517261^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Intel                 

architecture                  0.9973832768367832^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Microarchitecture     

MIC                           0.6207971701999991^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Minimum_inhibitory_concentration

speedup                       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Speedup               

CUDA                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/CUDA                  

GPU                           0.9986088002978257^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graphics_processing_unit

vector instructions           0.9997211541161516^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/SIMD                  

SSA                           0.9999999999331521^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Static_single_assignment_form

Central                       0.655938234694004^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Central_America       

CPU                           0.9999999999752163^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

MIC                           0.6207971701999991^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Minimum_inhibitory_concentration

coprocessors                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Coprocessor           

MIC                           0.6207971701999991^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Minimum_inhibitory_concentration

MIC                           0.6207971701999991^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Minimum_inhibitory_concentration

CPU                           0.9999999999752163^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

MIC                           0.6207971701999991^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Minimum_inhibitory_concentration

SSA                           0.9999999999331521^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Static_single_assignment_form

Stochastic                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Stochastic            

vector instructions           0.9997211541161516^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/SIMD                  

MIC                           0.6207971701999991^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Minimum_inhibitory_concentration

CPU                           0.9999999999752163^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

