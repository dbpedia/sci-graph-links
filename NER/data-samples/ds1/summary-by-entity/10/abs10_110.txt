Abstract The broadcast storm problem causes redundancy, contention and collision of messages in a network, particularly in vehicular ad hoc networks (VANETs) where number of participants can grow arbitrarily. This paper presents a solution to this problem in which a node is designated as a master through an election process. Moreover, an algorithm is proposed for asynchronous VANETs to select a master node, where the participants (i.e., vehicles) can communicate with each other directly (single-hop). The proposed algorithm is extrema-finding in a way that a node having maximum signal strength is elected as a master node and each vehicle continues communication with the master until the master node keeps its signal strength at the highest level and remains operational too. This paper further presents the Petri net-based modeling of the proposed algorithm for evaluation which is going to be presented for the first time in leader election algorithm in VANETs. Verification of the proposed algorithm is carried out through state space analysis technique.
node                0.9999997172442763^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

signal strength               0.9983374191458659^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Signal_strength       

node                          0.9999997172442763^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

asynchronous                  0.9999132756994503^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Asynchrony            

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

signal strength               0.9983374191458659^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Signal_strength       

communication                 0.7686463143278109^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Communication         

node                          0.9999997172442763^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

redundancy                    0.5079140725074894^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_redundancy       

network                       0.999988621807164^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Computer_network      

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

leader election               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Leader_election       

vehicular ad hoc networks     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Vehicular_ad_hoc_network

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

ad hoc networks               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_ad_hoc_network

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

node                          0.9999997172442763^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

node                          0.9999997172442763^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

