Abstract Large fractions of today’s embedded systems’ power consumption can be attributed to the memory subsystem. In order to reduce this fraction, we propose a mathematical model to optimize on-chip memory configurations for minimal power. We exploit the power reduction effect of splitting memory into subunits with frequently accessed addresses mapped to small memories. The definition of an integer linear programming model enables us to solve the twofold problem of allocating an optimal set of memory instances with varying size on the one hand and finding an optimal mapping of application segments to allocated memories on the other hand. Experimental results yield power reductions of up to 82 �or instruction memory and 73 �or data memory. Area usage, at the same time, deteriorates by only 2.1 �respectively, 1.2 �n average and even improves in some cases. Flexibility and performance of our model make it a valuable tool for low power system-on-chip design, either for efficient design space exploration or as part of a HW/SW codesign synthesis flow.
power consumption   0.9501452644980201^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Electric_energy_consumption

memory                        0.9691373999118383^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_management     

mathematical model            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Mathematical_model    

embedded systems              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Embedded_system       

integer linear programming    0.9999989230568759^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Linear_programming    

system-on-chip                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/System_on_a_chip      

memory                        0.9691373999118383^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_management     

SW                            0.9166339040910637^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Switched_fabric       

memory                        0.9691373999118383^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_management     

fractions                     0.7718014416283058^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Rational_number       

memory                        0.9691373999118383^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_management     

'                             0.9999999999985221^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Apostrophe            

memory subsystem              0.9999947544170047^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_hierarchy      

space exploration             0.9999939170962462^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Space_exploration     

memory                        0.9691373999118383^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Memory_management     

subunits                      0.9994125059116062^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Amino_acid            

