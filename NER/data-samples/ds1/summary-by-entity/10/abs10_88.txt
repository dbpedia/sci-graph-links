Abstract Target tracking is one of the important applications of wireless sensor networks (WSNs). Most of the existing approaches assume that the nodes are dense enough and ignore the coverage holes which are very common in WSNs because of random deployment of the sensor nodes, block of obstacles, etc. Besides, predicting the target’s location of the next time instance is unwise because of the quite a lot random factors. In this paper, we propose a novel target tracking approach without any predicting, called k-nearest neighbors tracking (k-NNT), to tackle the problems of energy efficiency, continuity and coverage holes. In k-NNT, only the k-nearest neighbors keep active and track the target when more than k nodes can sense the target; the k′-nearest neighbors work when there are only k′ nodes (k′ < k) can sense the target. A sophisticated rotation mechanism is designed to improve the continuity of the tracking process. In the worst case, none of the nodes can sense the target, i.e., the target enters into the coverage holes, and then k-NNT recovers by the Round Up mode (RU mode). The nodes on the perimeter of the coverage hole always keep active for a time threshold t and sense the around environment to find the target in time. Once a node finds the target, the RU mode is over and the irrelevant nodes turn into inactive mode. A series of simulation show that k-NNT performs superiorly compared with several existing approaches in terms of tracking accuracy, continuity and energy efficiency.
nodes               0.9849070335404176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

rotation                      0.9999986489085618^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Rotation              

nodes                         0.9849070335404176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

Target                        0.9999731517897641^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Target_Corporation    

energy efficiency             0.9999997172700832^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Efficient_energy_use  

WSNs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_sensor_network

wireless sensor networks      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_sensor_network

nodes                         0.9849070335404176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

sensor nodes                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Sensor_node           

nodes                         0.9849070335404176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

nodes                         0.9849070335404176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

continuity                    0.9999999868822443^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Continuous_function   

k-nearest neighbors           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/K-nearest_neighbors_algorithm

WSNs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_sensor_network

Round Up                      0.8611335499124304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Operation_Roundup_(1942)

nodes                         0.9849070335404176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

k-nearest neighbors           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/K-nearest_neighbors_algorithm

node                          0.9831630481890161^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

RU                            0.6385235296044134^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Rack_unit             

RU                            0.6385235296044134^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Rack_unit             

continuity                    0.9999999868822443^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Continuous_function   

continuity                    0.9999999868822443^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Continuous_function   

worst case                    0.9998231535186854^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Best,_worst_and_average_case

tackle                        0.8499821046817363^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Block_and_tackle      

energy efficiency             0.9999997172700832^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Efficient_energy_use  

simulation                    0.9166529104053448^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Simulation            

