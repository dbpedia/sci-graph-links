Abstract We propose a solution based on networks of picture processors to the problem of picture pattern matching. The network solving the problem can be informally described as follows: it consists of two subnetworks, one of them extracts at each step, simultaneously, all subpictures of identical (progressively decreasing) size from the input picture and sends them to the other subnetwork which checks whether any of the received pictures is identical to the pattern. We present an efficient solution based on networks with evolutionary processors only, for patterns with at most three rows or columns. Afterward, we present a solution based on networks containing both evolutionary and hiding processors running in $${\\mathcal {O}}(n+m+kl)$$ O(n+m+kl) computational (processing and communication) steps, for any size (n, m) of the input picture and (k, l) of the pattern. From the proofs of these results, we infer that any (k, l)-local language with $$1\\le k\\le 3$$ 1≤k≤3 can be decided in $${\\mathcal {O}}(n+m+l)$$ O(n+m+l) computational steps by networks with evolutionary processors only, while any (k, l)-local language with arbitrary k, l can be decided in $${\\mathcal {O}}(n+m+kl)$$ O(n+m+kl) computational steps by networks containing both evolutionary and hiding processors.
processors          0.9995439416297304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

pattern matching              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Pattern_matching      

communication                 0.8696710989967459^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Communication         

language                      0.9951675391529896^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Formal_language       

evolutionary                  0.9636882280859222^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Evolution             

processors                    0.9995439416297304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

processors                    0.9995439416297304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

evolutionary                  0.9636882280859222^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Evolution             

subnetworks                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Subnetwork            

language                      0.9951675391529896^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Formal_language       

subnetwork                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Subnetwork            

evolutionary                  0.9636882280859222^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Evolution             

processors                    0.9995439416297304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

network                       0.9896272658225663^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_network      

columns                       0.9727056926098373^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Column_vector         

evolutionary                  0.9636882280859222^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Evolution             

processors                    0.9995439416297304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Central_processing_unit

