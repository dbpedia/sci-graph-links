Abstract Efficient symbolic and explicit-state model checking approaches have been developed for the verification of linear time temporal logic (LTL) properties. Several attempts have been made to combine the advantages of the various algorithms. Model checking LTL properties usually poses two challenges: one must compute the synchronous product of the state space and the automaton model of the desired property, then look for counterexamples that is reduced to finding strongly connected components (SCCs) in the state space of the product. In case of concurrent systems, where the phenomenon of state space explosion often prevents the successful verification, the so-called saturation algorithm has proved its efficiency in state space exploration. This paper proposes a new approach that leverages the saturation algorithm both as an iteration strategy constructing the product directly, as well as in a new fixed-point computation algorithm to find strongly connected components on-the-fly by incrementally processing the components of the model. Complementing the search for SCCs, explicit techniques and component-wise abstractions are used to prove the absence of counterexamples. The resulting on-the-fly, incremental LTL model checking algorithm proved to scale well with the size of models, as the evaluation on models of the Model Checking Contest suggests.
saturation          0.8642232230587285^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Colorfulness          

concurrent systems            0.9999975082556951^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Concurrency_(computer_science)

algorithms                    0.9999999997216946^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

model checking                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Model_checking        

SCCs                          0.5526282916062912^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Source_Code_Control_System

synchronous                   0.6311586186847133^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Synchronization       

model checking                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Model_checking        

counterexamples               0.9999999999862439^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Counterexample        

linear time                   0.9946424639864002^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Time_complexity       

LTL                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Linear_temporal_logic 

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

temporal logic                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Temporal_logic        

LTL                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Linear_temporal_logic 

on-the-fly                    0.9999998453394148^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/On_the_fly            

connected components          0.998376981103018^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Connected_space       

abstractions                  0.9840972886818146^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Abstraction           

fixed-point                   0.6688378241752402^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Fixed-point_arithmetic

automaton                     0.9951148785315758^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Automata_theory       

LTL                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Linear_temporal_logic 

iteration                     0.9652120167437589^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Iteration             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

on-the-fly                    0.9999998453394148^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/On_the_fly            

saturation                    0.8642232230587285^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Colorfulness          

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

counterexamples               0.9999999999862439^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Counterexample        

connected components          0.998376981103018^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Connected_space       

SCCs                          0.5526282916062912^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Source_Code_Control_System

space exploration             0.9999848795627628^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Space_exploration     

Model checking                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Model_checking        

