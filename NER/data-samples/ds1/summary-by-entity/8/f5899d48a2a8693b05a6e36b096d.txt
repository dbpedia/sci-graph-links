Abstract The evolution of modern web application involves a broad range of web technologies such as ActiveX, JavaScript and CGI. It mitigates the demand of bolt-on security services, but remains suffered from code vulnerabilities. Two common issues of web application code vulnerability are the wrong style of writing code and improper server configuration. Enhancing the web applicationâ€™s functionalities and ease of use are the primary concern of developers. Security is their second concern, resulting in code vulnerabilities. The application developers may effectively deal with code vulnerabilities through adhering to Secure Coding Standards. But manually applying all the Secure Coding Standard is susceptible to human errors. Hence, a graph-based interactive system is developed in the context of Secure Coding Standards to handle code vulnerabilities. Evaluation of the developed system is carried out by using standard available datasets such as CVE, NVD, Syhunt Vulnerable PHP Code and OWASP.
JavaScript          0.9999999999984084^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/JavaScript            

vulnerability                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Vulnerability_(computing)

PHP                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/PHP                   

web application               0.9889781861750888^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Web_application       

web application               0.9889781861750888^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Web_application       

OWASP                         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/OWASP                 

vulnerabilities               0.9997132269451373^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Vulnerability_(computing)

vulnerabilities               0.9997132269451373^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Vulnerability_(computing)

web application               0.9889781861750888^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Web_application       

vulnerabilities               0.9997132269451373^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Vulnerability_(computing)

bolt-on                       0.9999590563506909^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bolt-on_neck          

CGI                           0.9999999999990905^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Common_Gateway_Interface

datasets                      0.9999999998846079^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Data_set              

human errors                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Human_error           

Vulnerable                    0.9999798095752683^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Vulnerable_species    

CVE                           0.999999999917577^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Common_Vulnerabilities_and_Exposures

vulnerabilities               0.9997132269451373^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Vulnerability_(computing)

ActiveX                       0.9993292685415304^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/ActiveX               

server                        0.9999881195659288^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Web_server            

evolution                     0.9999830602191719^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Evolution             

