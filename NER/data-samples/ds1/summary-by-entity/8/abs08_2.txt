Abstract The maximum set k-covering problem (MKCP) is a famous combinatorial optimization problem with widely many practical applications. In our work, we design a restart local search algorithm for solving MKCP, which is called RNKC. This algorithm effectively makes use of several advanced ideas deriving from the random restart mechanism and the neighborhood search method. RNKC designs a new random restart method to deal with the serious cycling problem of local search algorithms. Thanks to the novel neighborhood search method that allows a neighborhood exploration of as many feasible search areas as possible, the RNKC can obtain some greatly solution qualities. Comprehensive results on the classical instances show that the RNKC algorithm competes very favorably with a famous commercial solver CPLEX. In particular, it discovers some improved and great results and matches the same solution quality for some instances.
search algorithms   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Search_algorithm      

algorithm                     0.9999999999989768^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

neighborhood                  0.9999610434760707^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Neighbourhood_(mathematics)

neighborhood                  0.9999610434760707^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Neighbourhood_(mathematics)

neighborhood                  0.9999610434760707^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Neighbourhood_(mathematics)

CPLEX                         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/CPLEX                 

combinatorial optimization    0.7187512024863316^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

local search algorithm        0.9999999999959073^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Local_search_(optimization)

algorithm                     0.9999999999989768^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

classical                     0.9994327650155277^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Classical_mechanics   

