Abstract In this paper, we study the problem of protecting privacy in the publication of set-valued data. Consider a collection of supermarket transactions that contains detailed information about items bought together by individuals. Even after removing all personal characteristics of the buyer, which can serve as links to his identity, the publication of such data is still subject to privacy attacks from adversaries who have partial knowledge about the set. Unlike most previous works, we do not distinguish data as sensitive and non-sensitive, but we consider them both as potential quasi-identifiers and potential sensitive data, depending on the knowledge of the adversary. We define a new version of the k-anonymity guarantee, the k m -anonymity, to limit the effects of the data dimensionality, and we propose efficient algorithms to transform the database. Our anonymization model relies on generalization instead of suppression, which is the most common practice in related works on such data. We develop an algorithm that finds the optimal solution, however, at a high cost that makes it inapplicable for large, realistic problems. Then, we propose a greedy heuristic, which performs generalizations in an Apriori, level-wise fashion. The heuristic scales much better and in most of the cases finds a solution close to the optimal. Finally, we investigate the application of techniques that partition the database and perform anonymization locally, aiming at the reduction of the memory consumption and further scalability. A thorough experimental evaluation with real datasets shows that a vertical partitioning approach achieves excellent results in practice.
supermarket         0.9999999993237907^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Supermarket           

scalability                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Scalability           

Apriori                       0.999998105979873^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/A_priori_and_a_posteriori

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithms                    0.9999999999985221^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

partition                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Partition_of_a_set    

heuristic                     0.9946119695109815^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Heuristic_(computer_science)

heuristic                     0.9946119695109815^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Heuristic_(computer_science)

