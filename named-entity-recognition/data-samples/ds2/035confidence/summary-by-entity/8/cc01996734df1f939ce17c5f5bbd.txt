Abstract In smart city construction, wireless sensor networks (WSNs) are normally deployed to collect and transmit real-time data. The nodes of the WSN are embedded facility that integrated sensors and data processing modules. For security and privacy concerns, cryptography methods are required for data protection. However, the Rivest-Shamir-Adleman (RSA) cryptosystem, known as the the most popular and deployed public key algorithm, is still hardly implemented on embedded devices because of the intense computation required from its inherent arithmetic operations. Even though, different methods have being proposed for more efficient RSA implementations such as utilizing the Chinese remainder theorem, various modular exponentiation methods, and optimized modular arithmetic methods. In this paper, we propose an efficient multiplication for long integers on the sensor nodes equipped with 16-bit microcontrollers. Combined with this efficient multiplication, we obtain a faster Montgomery multiplication. The combined optimized Montgomery multiplication, the Chinese remainder theorem, and the m-ary exponentiation method allowed for execution times of less than 44.6 Ã— 106 clock cycles for RSA decryption, a new speed record for the RSA implementation on MSP430 microcontrollers.
wireless sensor networks1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_sensor_network

RSA                           0.9999999907849997^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/RSA_(security_firm)   

real-time data                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Real-time_data        

RSA                           0.9999999907849997^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/RSA_(security_firm)   

computation                   0.7502304020729018^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_architecture 

public key algorithm          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Public-key_cryptography

smart city                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Smart_city            

WSN                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_sensor_network

nodes                         0.999999952864415^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Node_(networking)     

WSNs                          1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Wireless_sensor_network

cryptography                  0.998045522136291^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Cryptography          

RSA                           0.9999999907849997^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/RSA_(security_firm)   

decryption                    0.9220315616010676^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Encryption            

modular arithmetic            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Modular_arithmetic    

sensor nodes                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Sensor_node           

clock cycles                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Clock_signal          

modular exponentiation        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Modular_exponentiation

16-bit                        0.9999999889023458^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/16-bit                

microcontrollers              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Microcontroller       

sensors                       0.9999999999997726^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Sensor                

Chinese remainder theorem     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Chinese_remainder_theorem

embedded devices              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Embedded_system       

modules                       0.9965791657893448^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Modularity            

MSP430                        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/TI_MSP430             

long integers                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Integer_(computer_science)

microcontrollers              1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Microcontroller       

exponentiation                0.9999999998041176^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Modular_exponentiation

data protection               0.9991197093098769^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Privacy               

RSA                           0.9999999907849997^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/RSA_(security_firm)   

Montgomery multiplication     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Montgomery_reduction  

arithmetic operations         1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Arithmetic            

data processing               0.9999984531509112^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_data_processing

privacy                       0.9999997805391799^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Privacy               

cryptosystem                  0.9999953439659457^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cryptosystem          

Chinese remainder theorem     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Chinese_remainder_theorem

Montgomery multiplication     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Montgomery_reduction  

