Abstract Block-matching algorithms (BMAs) are widely employed for motion estimation. BMAs divide input frames into several blocks and minimize an error function for each block to calculate motion vectors. Afterward, each motion vector is applicable for all of the pixels within the block. Since computing the error functions is resource intensive, many fast-search motion estimation algorithms have been suggested to reduce the computational cost. These fast algorithms provide a significant reduction in computation but often converge to a local minimum. A learning automaton is an adaptive decision-making unit that learns the optimal action through repeated interactions with its environment. Learning automata (LA) have been applied successfully to a wide range of applications including pattern recognition, dynamic channel assignment, and social network analysis. In this paper, we apply LA to motion estimation problem, which is one of the basic problems in computer vision. We compare the accuracy and performance of the suggested algorithms with other well-known BMAs. Interestingly, the obtained results indicate high efficiency and accuracy of the proposed methods. The results suggest that simplicity, efficiency, parallel nature, and accuracy of LA-based methods make them a good candidate to solve computer vision problems.
pattern recognition 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Pattern_recognition   

motion estimation             0.9999753162606699^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Motion_estimation     

motion vector                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Motion_vector         

algorithms                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

motion vectors                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Motion_vector         

fast algorithms               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Time_complexity       

error function                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Error_function        

motion estimation             0.9999753162606699^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Motion_estimation     

computer vision               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Computer_vision       

pixels                        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Pixel                 

social network analysis       0.7708844371279344^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Social_network        

automata                      0.9582513461238703^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Finite-state_machine  

computation                   0.999999997442842^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Computation           

channel                       0.9999999997814939^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Channel_(communications)

automaton                     0.5461802160100294^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Cellular_automaton    

algorithms                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

computing                     0.9995701823425138^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computation           

computer vision               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Computer_vision       

local minimum                 0.9999999799365471^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Maxima_and_minima     

motion estimation             0.9999753162606699^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Motion_estimation     

algorithms                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

