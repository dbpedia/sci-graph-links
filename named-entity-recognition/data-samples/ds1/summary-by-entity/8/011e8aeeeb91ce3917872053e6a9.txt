Abstract The greedy spanner is the highest quality geometric spanner (in e.g. edge count and weight, both in theory and practice) known to be computable in polynomial time. Unfortunately, all known algorithms for computing it on n points take $$\\varOmega (n^2)$$ Ω(n2) time, limiting its applicability on large data sets. We propose a novel algorithm design which uses the observation that for many point sets, the greedy spanner has many ‘short’ edges that can be determined locally and usually quickly. To find the usually few remaining ‘long’ edges, we use a combination of already determined local information and the well-separated pair decomposition. We give experimental results showing large to massive performance increases over the state-of-the-art on nearly all tests and real-life data sets. On the theoretical side we prove a near-linear expected time bound on uniform point sets and a near-quadratic worst-case bound. Our bound for point sets drawn uniformly and independently at random in a square follows from a local characterization of t-spanners we give on such point sets. We give a geometric property that holds with high probability, which in turn implies that if an edge set on these points has t-paths between pairs of points ‘close’ to each other, then it has t-paths between all pairs of points. This characterization gives an $$O(n \\log ^2 n \\log ^2 \\log n)$$ O(nlog2nlog2logn) expected time bound on our greedy spanner algorithm, making it the first subquadratic time algorithm for this problem on any interesting class of points. We also use this characterization to give an $$O((n + |E|) \\log ^2 n \\log \\log n)$$ O((n+|E|)log2nloglogn) expected time algorithm on uniformly distributed points that determines whether E is a t-spanner, making it the first subquadratic time algorithm for this problem that does not make assumptions on E.
algorithm design    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

massive performance           0.9999999999959073^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/The_Wall_–_Live_in_Berlin

spanner                       0.9999986086876917^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wrench                

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

geometric spanner             1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Geometric_spanner     

decomposition                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Variance              

spanner                       0.9999986086876917^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wrench                

computing                     0.9978095927904427^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computation           

point sets                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Point_cloud           

polynomial time               0.9999999570771942^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Time_complexity       

probability                   0.8334805083172699^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Probability_theory    

algorithms                    0.9937666603166385^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Randomized_algorithm  

uniformly distributed         0.8502328590615115^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Uniform_distribution_(continuous)

n2                            0.9999999586048043^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Nitrogen              

data sets                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_set              

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

point sets                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Point_cloud           

data sets                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Data_set              

geometric                     0.9998554606785491^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Geometric_mean        

computable                    0.9999919884395798^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Turing_machine        

point sets                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Point_cloud           

spanner                       0.9999986086876917^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wrench                

point sets                    1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Point_cloud           

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

