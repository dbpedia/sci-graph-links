Abstract In this paper, three recently developed meta-heuristic optimization algorithms, known as colliding bodies optimization (CBO), enhanced colliding bodies optimization (ECBO) and tug of war optimization (TWO), are used for optimum nodal ordering to reduce bandwidth, profile and wavefront of sparse matrices. The CBO is a simple optimization method inspired by a collision between two objects in one dimension. Each agent is modeled as a body which has a specified mass and velocity. A collision occurs between pairs of bodies, and the new positions of the colliding bodies are updated based on the collision laws. The ECBO employs memory to save some best-so-far position to improve the performance of the CBO without increasing the computational effort. This algorithm uses a mechanism to escape from local optima. The recently developed algorithm TWO is a multi-agent meta-heuristic algorithm, which considers each candidate solution as a team engaged in a series of tug of war competitions. The bandwidth, profile and wavefront of some graph matrices, which have equivalent pattern to structural matrices, are minimized utilizing these methods. Comparison of the achieved results with those of some existing approaches shows the robustness of these three new meta-heuristic algorithms for bandwidth, profile and wavefront optimization.
optimization        0.9999999856787555^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

CBO                           0.9999999925462362^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

tug                           0.9999999999993179^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tugboat               

algorithms                    0.9999999999872671^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

dimension                     0.999999950346479^^http://www.w3.org/2001/XMLSchema#double            http://dbpedia.org/resource/Dimension_(mathematics_and_physics)

optimization                  0.9999999856787555^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

optimization                  0.9999999856787555^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

mass                          0.9997166641688104^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mass                  

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

CBO                           0.9999999925462362^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

sparse matrices               1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Sparse_matrix         

CBO                           0.9999999925462362^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Congressional_Budget_Office

wavefront                     0.7336460098632448^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wave                  

robustness                    0.9896409617928484^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Robust_statistics     

algorithms                    0.9999999999872671^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

bandwidth                     0.9593765370257921^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bandwidth_(computing) 

graph                         0.5726530843612253^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Graph_(mathematics)   

matrices                      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Matrix_(mathematics)  

matrices                      1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Matrix_(mathematics)  

multi-agent                   0.7067920380390464^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Agent-based_model     

wavefront                     0.7336460098632448^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wave                  

candidate solution            1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Candidate_solution    

optimization                  0.9999999856787555^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

wavefront                     0.7336460098632448^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Wave                  

TWO                           0.9299798316382144^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Transport_and_Works_Act_1992

tug                           0.9999999999993179^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Tugboat               

bandwidth                     0.9593765370257921^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bandwidth_(computing) 

TWO                           0.9299798316382144^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Transport_and_Works_Act_1992

optimization                  0.9999999856787555^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

bandwidth                     0.9593765370257921^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bandwidth_(computing) 

memory                        0.9944213783571971^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Computer_memory       

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

velocity                      0.9999999859213632^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Velocity              

optimization                  0.9999999856787555^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

nodal                         0.9999999964529707^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Node_(networking)     

local optima                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Local_optimum         

