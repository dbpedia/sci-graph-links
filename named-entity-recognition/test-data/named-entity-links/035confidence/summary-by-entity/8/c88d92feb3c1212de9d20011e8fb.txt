Abstract Scalable storage architectures enable digital libraries and archives for the addition or removal of storage devices to increase storage capacity and bandwidth or retire older devices. Past work in this area have mainly focused on statically scaling homogeneous storage devices. However, heterogeneous devices are quickly being adopted for storage scaling since they are usually faster, larger, more widely available, and more cost-effective. We propose BroadScale, an algorithm based on Random Disk Labeling, to dynamically scale heterogeneous storage systems by distributing data objects according to their device weights. Assuming a random placement of objects across a group of heterogeneous storage devices, our optimization objectives when scaling are to ensure a uniform distribution of objects, redistribute a minimum number of objects, and maintain fast data access with low computational complexity. We show through experimentation that BroadScale achieves these requirements when scaling heterogeneous storage.
heterogeneous       0.9999998197936455^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Homogeneity_and_heterogeneity

data access                   0.7003829532022781^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/General_Packet_Radio_Service

heterogeneous                 0.9999998197936455^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Homogeneity_and_heterogeneity

digital libraries             0.9999999999935199^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Digital_library       

data objects                  1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Object_(computer_science)

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

heterogeneous                 0.9999998197936455^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Homogeneity_and_heterogeneity

computational complexity      0.7837285290031766^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Big_O_notation        

uniform distribution          0.8180668322930483^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Uniform_distribution_(continuous)

archives                      0.6315703977269235^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Archive               

bandwidth                     0.9999990287344814^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bandwidth_(computing) 

optimization                  0.9299525451273241^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Program_optimization  

heterogeneous                 0.9999998197936455^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Homogeneity_and_heterogeneity

homogeneous                   0.9999996115149843^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Homogeneity_and_heterogeneity

