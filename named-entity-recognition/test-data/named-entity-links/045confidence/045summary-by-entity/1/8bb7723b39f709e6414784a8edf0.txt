Abstract This article introduces a new variation of a known metaheuristic method for solving global optimization problems. The proposed algorithm is based on the Bat algorithm (BA), which is inspired by the micro-bat echolocation phenomenon, and addresses the problems of local-optima trapping using a special mutation operator that enhances the diversity of the standard BA, hence the name enhanced Bat algorithm (EBat). The design of EBat is introduced and its performance is evaluated against 24 of the standard benchmark functions, and compared to that of the standard BA, as well as to several well-established metaheuristic techniques. We also analyze the impact of different parameters on the EBat algorithm and determine the best combination of parameter values in the context of numerical optimization. The obtained results show that the new EBat method is indeed a promising addition to the arsenal of metaheuristic algorithms and can outperform several existing ones, including the original BA algorithm.
Bat algorithm       1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bat_algorithm         

Bat algorithm                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Bat_algorithm         

BA                            0.8367307782661253^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bachelor_of_Arts      

algorithms                    0.9999999165872885^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

algorithm                     1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

mutation                      0.9415501028636188^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mutation              

numerical optimization        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Mathematical_optimization

metaheuristic                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Metaheuristic         

BA                            0.8367307782661253^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bachelor_of_Arts      

global optimization           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Global_optimization   

metaheuristic                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Metaheuristic         

echolocation                  0.9996062134016329^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Animal_echolocation   

metaheuristic                 1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Metaheuristic         

BA                            0.8367307782661253^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bachelor_of_Arts      

optimization problems         0.9998980549953619^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Mathematical_optimization

BA                            0.8367307782661253^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Bachelor_of_Arts      

