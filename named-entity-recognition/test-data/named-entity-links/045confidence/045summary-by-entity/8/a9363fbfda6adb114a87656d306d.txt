Abstract In this paper, we study the problem of supporting multidimensional range queries on encrypted data. The problem is motivated by secure data outsourcing applications where a client may store his/her data on a remote server in encrypted form and want to execute queries using server’s computational capabilities. The solution approach is to compute a secure indexing tag of the data by applying bucketization (a generic form of data partitioning) which prevents the server from learning exact values but still allows it to check if a record satisfies the query predicate. Queries are evaluated in an approximate manner where the returned set of records may contain some false positives. These records then need to be weeded out by the client which comprises the computational overhead of our scheme. We develop a bucketization procedure for answering multidimensional range queries on multidimensional data. For a given bucketization scheme, we derive cost and disclosure-risk metrics that estimate client’s computational overhead and disclosure risk respectively. Given a multidimensional dataset, its bucketization is posed as an optimization problem where the goal is to minimize the risk of disclosure while keeping query cost (client’s computational overhead) below a certain user-specified threshold value. We provide a tunable data bucketization algorithm that allows the data owner to control the trade-off between disclosure risk and cost. We also study the trade-off characteristics through an extensive set of experiments on real and synthetic data.
algorithm           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Algorithm             

predicate                     0.9942449253559503^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Predicate_(mathematical_logic)

computational overhead        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Overhead_(computing)  

outsourcing                   0.9999999999701004^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Outsourcing           

computational overhead        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Overhead_(computing)  

computational overhead        1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Overhead_(computing)  

optimization problem          0.8116616708449963^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Optimization_problem  

