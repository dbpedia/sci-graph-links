Abstract Latent Dirichlet allocation (LDA) is a popular topic modeling method which has found many multimedia applications, such as motion analysis and image categorization. Communication cost is one of the main bottlenecks for large-scale parallel learning of LDA. To reduce communication cost, we introduce Zipfâ€™s law and propose novel parallel LDA algorithms that communicate only partial important information at each learning iteration. The proposed algorithms are much more efficient than the current state-of-the-art algorithms in both communication and computation costs. Extensive experiments on large-scale data sets demonstrate that our algorithms can greatly reduce communication and computation costs to achieve a better scalability.
Latent Dirichlet allocation1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Latent_Dirichlet_allocation

LDA                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Latent_Dirichlet_allocation

algorithms                    0.9999999994938662^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

topic modeling                1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Topic_model           

multimedia                    0.9999786286429946^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Multimedia            

algorithms                    0.9999999994938662^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

LDA                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Latent_Dirichlet_allocation

motion analysis               0.9999999999995453^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Motion_analysis       

algorithms                    0.9999999994938662^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

LDA                           1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Latent_Dirichlet_allocation

algorithms                    0.9999999994938662^^http://www.w3.org/2001/XMLSchema#double           http://dbpedia.org/resource/Algorithm             

scalability                   1.0^^http://www.w3.org/2001/XMLSchema#double                          http://dbpedia.org/resource/Scalability           

